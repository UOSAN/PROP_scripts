#------------------------------------------------------
# load/install packages
#------------------------------------------------------
osuRepo = 'http://ftp.osuosl.org/pub/cran/'
if (!require(tidyverse)) {
install.packages('tidyverse', repos = osuRepo)
}
#------------------------------------------------------
# source the config file
#------------------------------------------------------
source('config.R')
#------------------------------------------------------
# load confound files
#------------------------------------------------------
fileList = list.files(confoundDir, pattern = 'confounds.tsv', recursive = TRUE)
for (file in fileList) {
# if the merged dataset doesn't exist, create it
if (!exists('dataset')) {
filePattern = paste0(subPattern, '_', wavePattern, '_',taskPattern, runPattern, '_bold_confounds.tsv')
dataset = read_tsv(file.path(confoundDir, file)) %>%
mutate(file = file) %>%
extract(file, c('subjectID', 'wave', 'task', 'run'),
file.path('sub-.*','ses-.*', 'func', filePattern)) %>%
mutate(wave = as.integer(wave),
run = as.integer(run),
stdDVARS = as.numeric(ifelse(stdDVARS %in% "n/a", 0, stdDVARS)),
`non-stdDVARS` = as.numeric(ifelse(`non-stdDVARS` %in% "n/a", 0, `non-stdDVARS`)),
`vx-wisestdDVARS` = as.numeric(ifelse(`vx-wisestdDVARS` %in% "n/a", 0, `vx-wisestdDVARS`)),
FramewiseDisplacement = as.numeric(ifelse(FramewiseDisplacement %in% "n/a", 0, FramewiseDisplacement)),
volume = row_number()) %>%
select(subjectID, wave, task, run, volume, everything())
colnames(dataset) = gsub('-', '.', colnames(dataset))
}
# if the merged dataset does exist, append to it
else {
filePattern = paste0(subPattern, '_', wavePattern, '_',taskPattern, runPattern, '_bold_confounds.tsv')
tmp = read_tsv(file.path(confoundDir, file)) %>%
mutate(file = file) %>%
extract(file, c('subjectID', 'wave', 'task', 'run'),
file.path('sub-.*','ses-.*', 'func', filePattern)) %>%
mutate(wave = as.integer(wave),
run = as.integer(run),
stdDVARS = as.numeric(ifelse(stdDVARS %in% "n/a", 0, stdDVARS)),
`non-stdDVARS` = as.numeric(ifelse(`non-stdDVARS` %in% "n/a", 0, `non-stdDVARS`)),
`vx-wisestdDVARS` = as.numeric(ifelse(`vx-wisestdDVARS` %in% "n/a", 0, `vx-wisestdDVARS`)),
FramewiseDisplacement = as.numeric(ifelse(FramewiseDisplacement %in% "n/a", 0, FramewiseDisplacement)),
volume = row_number()) %>%
select(subjectID, wave, task, run, volume, everything())
colnames(tmp) = gsub('-', '.', colnames(tmp))
dataset = bind_rows(dataset, tmp)
rm(tmp)
}
}
View(dataset)
#------------------------------------------------------
# apply classifier
#------------------------------------------------------
# load classifier
mlModel = readRDS('motion_classifier.rds')
# apply model
dataset$trash = predict(mlModel, dataset)
View(dataset)
# recode trash as 1 or 0
dataset = dataset %>%
mutate(trash = ifelse(trash == "yes", 1, 0),
trash = ifelse(is.na(trash), 0, trash))
View(dataset)
#------------------------------------------------------
# write plots
#------------------------------------------------------
# plot indicators values as a function of time for the motion indicators specified in config.R
if (writePlot) {
# create the plot directory if it does not exist
if (!file.exists(plotDir)) {
message(paste0(plotDir, ' does not exist. Creating it now.'))
dir.create(plotDir)
}
# save the plots
plots_written = dataset %>%
mutate(label = ifelse(grepl(1, trash), as.character(volume), ''),
code = ifelse(trash == 1, 'trash', NA)) %>%
gather(indicator, value, figIndicators) %>%
group_by(subjectID, wave, task, run) %>%
do({
plot = ggplot(., aes(x = volume, y = value)) +
geom_line(data = filter(., subjectID == .$subjectID[[1]] & wave == .$wave[[1]] & task == .$task[[1]] & run == .$run[[1]]), size = .25) +
geom_point(data = subset(filter(., subjectID == .$subjectID[[1]] & wave == .$wave[[1]] & task == .$task[[1]] & run == .$run[[1]]), !is.na(code)), aes(color = code), size = 4) +
geom_text(data = filter(., subjectID == .$subjectID[[1]] & wave == .$wave[[1]] & task == .$task[[1]] & run == .$run[[1]]), aes(label = label), size = 2) +
facet_grid(indicator ~ ., scales = 'free') +
scale_color_manual(values = "#E4B80E") +
labs(title = paste0(.$subjectID[[1]], "  ", .$wave[[1]], "  ", .$task[[1]], "  ", .$run[[1]]),
y = "value\n",
x = "\nvolume") +
theme_minimal(base_size = 10) +
theme(legend.position = "none")
#print(plot)
ggsave(plot, file = file.path(plotDir, paste0(.$subjectID[[1]], '_', .$wave[[1]], '_', .$task[[1]], '_', .$run[[1]], figFormat)), height = figHeight, width = figWidth, dpi = figDPI)
data.frame()
})
}
